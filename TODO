Bug:

- divide by col & row giving wired results
- recheck effectiveness of other size optimization: old check was bugged and completely uninformative


Features (ranked)

[cutoff]

- grid queries
  - can also be use during construction
  - started with wrong interface: vPos, vSize, and vNum
  - change to: for each dimension a list of the coordinates that shall be queried
  - gets super complicated, since orthotope dimensions do not follow grid
  -> for now: forget about this...

- new prefix sum computation (diagonals) debugging

- reaching 1bp resolution:
  - store list of individual points for each poision of the prefix sum array 
    - think about: how to deal with data-rectangles / where to store them?
      - if storage is sorted format, a proper binary search is enough
      - is decomposition as is done for the annotations an option?
        - split overlapping rectangles into overlapping and non overlapping part
        - keep counted ids in a set
        - count is size of set at the end
    - Idea: store for each box/prefix sum entry (check num points in box first)
    - requires one additional vector
    - then points can be searched by iteration at smallest resolution
    - try other sparse coords arrays before trying this (didn't help -> need point storage)
    - store points in cooler format basically
      - pos x from, pos y from, pos x to, pos y to, mapq, filters, ...
      - sorted by columns

- better compression
  - one could just store the overlay values
  - then always iterate of the entries in one box to get the remaining count
  - first: - check proportions of overlay prefix sums vs internal prefix sums
           - check size of overlays and weather a grid query would then cause iteration over all reads
  - could also fix/integrate with getting a 1bp resolution

- move code into smaller files
  - e.g. file for grid queries / single queries & fullQueries

- hdf5 storage
  - nezar was talking about better interface for this



